// SPDX-FileCopyrightText: 2022 Contributors to the Power Grid Model project <dynamic.grid.calculation@alliander.com>
//
// SPDX-License-Identifier: MPL-2.0

// This header file is automatically generated. DO NOT modify it manually!

// clang-format off
#pragma once
#ifndef POWER_GRID_MODEL_AUXILIARY_META_GEN_{{ include_guard }}_HPP
#define POWER_GRID_MODEL_AUXILIARY_META_GEN_{{ include_guard }}_HPP

#include "gen_getters.hpp" // NOLINT

#include "../../enum.hpp"               // NOLINT
#include "../../power_grid_model.hpp"   // NOLINT
#include "../../three_phase_tensor.hpp" // NOLINT
#include "../meta_data.hpp"             // NOLINT
#include "../{{ name }}.hpp" // NOLINT


namespace power_grid_model::meta_data {

// template specialization to get list of attributes in the value field

{% for attribute_class in classes -%}

{%- if attribute_class.is_template -%}
template <bool sym>
struct get_attributes_list<{{ attribute_class.name }}<sym>> {
{%- else -%}
template<>
struct get_attributes_list<{{ attribute_class.name }}> {
{%- endif %}
    static constexpr std::array<MetaAttribute, {{ attribute_class.full_attributes|length }}> value{
            // all attributes including base class
            {% for attribute in attribute_class.full_attributes %}
            meta_data_gen::get_meta_attribute<{{ attribute_class.full_name }}, &{{ attribute_class.full_name }}::{{ attribute.names }}, offsetof({{ attribute_class.full_name }}, {{ attribute.names }}), []{ return "{{ attribute.names }}"; }>::value,
            {%- endfor %}
    };
};

{% endfor %}

// template specialization functors to get nan

{% for attribute_class in classes -%}

{%- if attribute_class.is_template -%}
template <bool sym>
struct get_component_nan<{{ attribute_class.name }}<sym>> {
{%- else -%}
template<>
struct get_component_nan<{{ attribute_class.name }}> {
{%- endif %}
    {{ attribute_class.full_name }} operator() () const {
        {{ attribute_class.full_name }} comp;
        // all attributes including base class
        {% for attribute in attribute_class.full_attributes %}
        set_nan(comp.{{ attribute.names }});
        {%- endfor %}
        return comp;
    }
};

{% endfor %}

} // namespace power_grid_model::meta_data

#endif
// clang-format on
